name: 🚀 Build and Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.0)'
        required: true
        default: 'v1.2.0'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'VideoDownloader'
  
jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore Dependencies
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet restore
        
    - name: 🏗️ Build Release
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet build -c Release --no-restore
        
    - name: 📤 Publish Self-Contained
      run: |
        cd ${{ env.PROJECT_PATH }}
        dotnet publish -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true --output ../publish
        
    - name: 📁 Create Portable Version
      run: |
        # Portable dizini oluştur
        mkdir portable
        
        # Ana dosyaları kopyala
        copy publish\VideoDownloader.exe portable\
        copy publish\*.dll portable\ 2>nul || echo "No DLLs to copy"
        
        # README ve diğer dosyalar
        echo "# 4K Video Downloader - Portable Version" > portable\README.txt
        echo "" >> portable\README.txt
        echo "This is the portable version of 4K Video Downloader." >> portable\README.txt
        echo "No installation required - just run VideoDownloader.exe" >> portable\README.txt
        echo "" >> portable\README.txt
        echo "Windows SmartScreen Notice:" >> portable\README.txt
        echo "If Windows shows a security warning, click 'More info' -> 'Run anyway'" >> portable\README.txt
        echo "This is normal for new applications without expensive commercial certificates." >> portable\README.txt
        
        # Version info
        echo "" >> portable\README.txt
        echo "Version: ${{ github.ref_name }}" >> portable\README.txt
        echo "Built: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> portable\README.txt
        echo "Source: https://github.com/${{ github.repository }}" >> portable\README.txt
      shell: pwsh
      
    - name: 🏗️ Build Installer (Inno Setup)
      run: |
        # Inno Setup script'i varsa çalıştır
        if (Test-Path "${{ env.PROJECT_PATH }}\VideoDownloader.iss") {
          echo "Building installer with Inno Setup..."
          # ISCC.exe yolunu bul ve çalıştır
          $innoPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          if (Test-Path $innoPath) {
            & $innoPath "${{ env.PROJECT_PATH }}\VideoDownloader.iss"
          } else {
            echo "Inno Setup not found, skipping installer creation"
          }
        } else {
          echo "No Inno Setup script found, skipping installer"
        }
      shell: pwsh
      continue-on-error: true
      
    - name: 📦 Create Archives
      run: |
        # Portable ZIP oluştur
        Compress-Archive -Path portable\* -DestinationPath "VideoDownloader-${{ github.ref_name }}-Portable.zip"
        
        # Source code backup (temizlenmiş)
        mkdir source-clean
        copy-item ${{ env.PROJECT_PATH }}\*.cs source-clean\ -Recurse -Force
        copy-item ${{ env.PROJECT_PATH }}\*.csproj source-clean\
        copy-item ${{ env.PROJECT_PATH }}\*.resx source-clean\ -ErrorAction SilentlyContinue
        copy-item README.md source-clean\ -ErrorAction SilentlyContinue
        copy-item LICENSE source-clean\ -ErrorAction SilentlyContinue
        Compress-Archive -Path source-clean\* -DestinationPath "VideoDownloader-${{ github.ref_name }}-Source.zip"
      shell: pwsh
      
    - name: 🔐 Generate File Checksums
      run: |
        echo "# File Checksums" > checksums.txt
        echo "" >> checksums.txt
        
        if (Test-Path "VideoDownloader-${{ github.ref_name }}-Portable.zip") {
          $hash = Get-FileHash "VideoDownloader-${{ github.ref_name }}-Portable.zip" -Algorithm SHA256
          echo "**Portable ZIP:**" >> checksums.txt
          echo "``$($hash.Hash)``" >> checksums.txt
          echo "" >> checksums.txt
        }
        
        if (Test-Path "installer-output\VideoDownloader-${{ github.ref_name }}-Setup.exe") {
          $hash = Get-FileHash "installer-output\VideoDownloader-${{ github.ref_name }}-Setup.exe" -Algorithm SHA256
          echo "**Setup EXE:**" >> checksums.txt
          echo "``$($hash.Hash)``" >> checksums.txt
        }
      shell: pwsh
      
    - name: 📋 Generate Release Notes
      id: release_notes
      run: |
        $version = "${{ github.ref_name }}"
        $releaseNotes = @"
        # 🎬 4K Video Downloader $version
        
        **Professional video downloader for YouTube, Twitter, and Instagram with 4K quality support.**
        
        ## ✨ What's New in $version
        - 🚀 Enhanced download performance and stability
        - 🎨 Improved user interface with better error handling
        - 🔒 Updated security features and dependencies
        - 🌍 Better multi-language support (Turkish/English)
        - 📱 Optimized for Windows 10/11
        
        ## 📥 Download Options
        
        | File | Size | Description |
        |------|------|-------------|
        | **VideoDownloader-$version-Setup.exe** | ~52MB | Full installer with auto-updates |
        | **VideoDownloader-$version-Portable.zip** | ~45MB | No installation required |
        | **Source Code** | ~2MB | Build from source (MIT License) |
        
        ## 🔒 Security Notice
        
        > **⚠️ Windows SmartScreen Warning:** As a new open-source application, Windows may show a security warning on first run. This is normal for apps without expensive commercial certificates.
        > 
        > **To run:** Click "More info" → "Run anyway"
        
        ## ✨ Features
        - 🎯 4K video quality downloads
        - 🌐 Multi-platform support (YouTube, Twitter, Instagram)
        - 📝 Subtitle download support  
        - 📊 Real-time progress tracking
        - 🌍 Multi-language interface (Turkish/English)
        - 🎨 Light/Dark theme options
        - 🔒 100% secure and private - no data collection
        
        ## 🛠️ System Requirements
        - Windows 10 version 1809 or later
        - .NET 8.0 Runtime (auto-installed)
        - Internet connection for downloads
        - 500 MB free disk space
        
        ## 🤝 Open Source
        - Full source code available on GitHub
        - MIT License - use freely
        - Community contributions welcome
        - No telemetry or data collection
        
        ## 🔧 Installation
        
        ### Option 1: Setup Installer
        1. Download `VideoDownloader-$version-Setup.exe`
        2. Run installer (click "More info" → "Run anyway" if warned)
        3. Follow installation wizard
        4. Launch from Start Menu
        
        ### Option 2: Portable Version
        1. Download `VideoDownloader-$version-Portable.zip`
        2. Extract to any folder
        3. Run `VideoDownloader.exe`
        4. No installation required!
        
        ## 📊 Why Open Source?
        We believe in transparency and community trust over expensive certificates:
        - **Full transparency:** See exactly what you're downloading
        - **Community reviewed:** Public development process
        - **No vendor lock-in:** Direct relationship with developers
        - **Faster updates:** No store approval delays
        
        ---
        
        **Made with ❤️ by the open source community**
        
        🐛 **Found a bug?** [Report it here](https://github.com/${{ github.repository }}/issues)
        💡 **Have a suggestion?** [Start a discussion](https://github.com/${{ github.repository }}/discussions)
        ⭐ **Like the project?** Give us a star!
        "@
        
        # Save to file
        $releaseNotes | Out-File -FilePath "release-notes.md" -Encoding UTF8
        
        # Set output for GitHub
        $releaseNotes = $releaseNotes -replace "`n", "%0A" -replace "`r", ""
        echo "notes=$releaseNotes" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: 🎉 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "4K Video Downloader ${{ github.ref_name }}"
        body_path: release-notes.md
        draft: false
        prerelease: false
        make_latest: true
        files: |
          VideoDownloader-${{ github.ref_name }}-Portable.zip
          VideoDownloader-${{ github.ref_name }}-Source.zip
          installer-output/VideoDownloader-${{ github.ref_name }}-Setup.exe
          checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📊 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.ref_name }}
        path: |
          publish/
          portable/
          *.zip
          checksums.txt
        retention-days: 30
        
    - name: ✅ Build Summary
      run: |
        echo "## 🎉 Build Completed Successfully!" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.ref_name }}" >> $env:GITHUB_STEP_SUMMARY
        echo "**Built on:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### 📥 Downloads Available:" >> $env:GITHUB_STEP_SUMMARY
        echo "- Setup Installer (.exe)" >> $env:GITHUB_STEP_SUMMARY  
        echo "- Portable Version (.zip)" >> $env:GITHUB_STEP_SUMMARY
        echo "- Source Code (.zip)" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### 🔗 Release URL:" >> $env:GITHUB_STEP_SUMMARY
        echo "https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $env:GITHUB_STEP_SUMMARY
      shell: pwsh 